============================= test session starts ==============================
platform darwin -- Python 3.12.0, pytest-8.3.5, pluggy-1.5.0
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/danielmeierendler/git/datason
configfile: pyproject.toml
testpaths: tests/core, tests/features, tests/integration, tests/coverage, tests/test_new_ml_frameworks.py, tests/test_modern_api.py
plugins: xdist-3.7.0, asyncio-0.23.5, cov-4.1.0, Faker-37.3.0, anyio-3.7.1, benchmark-5.1.0, mock-3.14.0
asyncio: mode=Mode.STRICT
collected 1247 items

tests/core/test_circular_references.py ..............                    [  1%]
tests/core/test_converters.py ................                           [  2%]
tests/core/test_core.py .........................                        [  4%]
tests/core/test_dataframe_orientation_regression.py ...............      [  5%]
tests/core/test_deserializers.py ....................                    [  7%]
tests/core/test_edge_cases.py .............................              [  9%]
tests/core/test_security.py ..........ss...s..........                   [ 11%]
tests/core/test_ultra_fast_path_coverage.py .........................    [ 13%]
tests/features/test_auto_detection_and_metadata.py ..................... [ 15%]
..                                                                       [ 15%]
tests/features/test_chunked_streaming.py .............................   [ 17%]
tests/features/test_ml_serializers.py ...............................    [ 20%]
tests/features/test_redaction.py ...................                     [ 21%]
tests/features/test_template_deserialization.py ........................ [ 23%]
.......                                                                  [ 24%]
tests/features/test_utils.py ........................................... [ 27%]
...................                                                      [ 29%]
tests/features/test_validation_integration.py ......                     [ 29%]
tests/integration/test_config_and_type_handlers.py ..................... [ 31%]
.........................                                                [ 33%]
tests/integration/test_optional_dependencies.py ........................ [ 35%]
...........                                                              [ 36%]
tests/integration/test_pickle_bridge.py ............................     [ 38%]
tests/integration/test_round_trip_serialization.py ..................... [ 40%]
........................................................................ [ 45%]
................................                                         [ 48%]
tests/integration/test_template_deserializer.py .............            [ 49%]
tests/integration/test_validation_full_round_trip.py ..                  [ 49%]
tests/coverage/test_advanced_features_boost.py .......................   [ 51%]
tests/coverage/test_comprehensive_coverage_boost.py ........             [ 52%]
tests/coverage/test_converters_boost.py ........................         [ 54%]
tests/coverage/test_core_coverage_boost.py ..s..s.......                 [ 55%]
tests/coverage/test_core_deserialization_paths.py ...................... [ 56%]
.............                                                            [ 57%]
tests/coverage/test_core_enhancements_diff.py ..................         [ 59%]
tests/coverage/test_core_error_paths.py ................                 [ 60%]
tests/coverage/test_coverage_boost.py ..s.....................s          [ 62%]
tests/coverage/test_datetime_coverage_boost.py ..............s           [ 63%]
tests/coverage/test_deserializer_ultra_boost.py ........................ [ 65%]
...............                                                          [ 67%]
tests/coverage/test_deserializers_additional.py .......                  [ 67%]
tests/coverage/test_deserializers_coverage_boost.py .................... [ 69%]
.                                                                        [ 69%]
tests/coverage/test_enhanced_deserializer_diff.py ...................... [ 71%]
....                                                                     [ 71%]
tests/coverage/test_exception_flows_batch1.py ............               [ 72%]
tests/coverage/test_exception_flows_batch2.py .................          [ 73%]
tests/coverage/test_exception_flows_batch3.py ................           [ 74%]
tests/coverage/test_focused_coverage_boost.py ..............             [ 76%]
tests/coverage/test_init_coverage_boost.py ..........................    [ 78%]
tests/coverage/test_lazy_imports_and_hotpath.py ...............          [ 79%]
tests/coverage/test_ml_serializers_coverage_boost.py .......ss.......    [ 80%]
tests/coverage/test_ml_with_real_libraries.py .......................... [ 82%]
............                                                             [ 83%]
tests/coverage/test_simple_coverage_boost.py ...............             [ 84%]
tests/coverage/test_targeted_coverage_boost.py ...........               [ 85%]
tests/coverage/test_template_and_optimization_paths.py ................. [ 87%]
.................                                                        [ 88%]
tests/coverage/test_ultra_coverage_boost.py ............................ [ 90%]
....................                                                     [ 92%]
tests/coverage/test_utils_comprehensive_boost.py ....................... [ 94%]
............                                                             [ 95%]
tests/coverage/test_validation_helpers_coverage.py ......                [ 95%]
tests/test_new_ml_frameworks.py .............................            [ 97%]
tests/test_modern_api.py .........................                       [100%]

=============================== warnings summary ===============================
tests/core/test_circular_references.py::TestCircularReferences::test_simple_circular_reference
tests/core/test_circular_references.py::TestCircularReferences::test_nested_circular_reference
tests/core/test_circular_references.py::TestRegression::test_circular_reference_performance
tests/coverage/test_core_coverage_boost.py::TestCircularReferenceHandling::test_circular_reference_in_object
tests/coverage/test_core_coverage_boost.py::TestCircularReferenceHandling::test_nested_circular_reference
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Circular reference detected in object.__dict__. Replacing with placeholder.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestCircularReferences::test_dict_circular_reference
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Circular reference detected at depth 2. Replacing with None to prevent infinite loops.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestProblematicObjects::test_mock_object_serialization
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Detected potentially problematic mock object: MagicMock. Using safe string representation.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestProblematicObjects::test_bytesio_object_serialization
tests/core/test_circular_references.py::TestProblematicObjects::test_problematic_object_combination
tests/core/test_circular_references.py::TestRegression::test_original_bug_scenario
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Detected potentially problematic IO object: BytesIO. Using safe string representation.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestProblematicObjects::test_problematic_object_combination
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Skipping potentially problematic object in __dict__['mock_connection'] of type MagicMock
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestProblematicObjects::test_problematic_object_combination
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Skipping potentially problematic object in __dict__['mock_object'] of type Mock
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestProblematicObjects::test_problematic_object_combination
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Detected potentially problematic IO object: StringIO. Using safe string representation.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_circular_references.py::TestRegression::test_original_bug_scenario
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Skipping potentially problematic object in __dict__['connection'] of type MagicMock
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/core/test_core.py::TestErrorRecoveryPatterns::test_error_recovery_patterns
tests/coverage/test_core_error_paths.py::TestSerializeErrorPaths::test_serialize_circular_reference
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Circular reference detected at depth 1. Replacing with None to prevent infinite loops.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/features/test_redaction.py::TestRedactionEngineEdgeCases::test_invalid_regex_pattern
  /Users/danielmeierendler/git/datason/tests/features/test_redaction.py:183: UserWarning: Invalid regex pattern '[invalid': unterminated character set at position 0
    engine = RedactionEngine(redact_patterns=["[invalid"])

tests/features/test_utils.py::TestDeepCompareExtended::test_deep_compare_string_length_limits
  /Users/danielmeierendler/git/datason/datason/utils.py:158: UserWarning: Large string detected at text (lengths: 20, 20)
    _compare_strings(obj1, obj2, result, path, config)

tests/integration/test_config_and_type_handlers.py::TestSerializationConfig::test_logging_config_safety
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: String length (2000) exceeds maximum (1000). Truncating.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/coverage/test_advanced_features_boost.py::TestAdvancedCachingAndOptimization::test_string_optimization_functions
  /Users/danielmeierendler/.pyenv/versions/3.12.0/lib/python3.12/site-packages/pluggy/_callers.py:103: UserWarning: String length (1000) exceeds maximum (500). Truncating.
    res = hook_impl.function(*args)

tests/coverage/test_coverage_boost.py::TestDeserializersEdgeCases::test_parse_datetime_edge_cases
  /Users/danielmeierendler/git/datason/tests/coverage/test_coverage_boost.py:144: UserWarning: Failed to parse datetime string '2023-13-45T25:70:90' using pandas: month must be in 1..12: 2023-13-45T25:70:90, at position 0
    assert parse_datetime_string("2023-13-45T25:70:90") is None

tests/coverage/test_deserializers_coverage_boost.py::TestDeserializationCoverage::test_comprehensive_error_paths
tests/coverage/test_exception_flows_batch3.py::TestDataStructureEdgeCases::test_deserialize_circular_references
  /Users/danielmeierendler/git/datason/datason/deserializers.py:1745: UserWarning: Circular reference detected in dict at depth 1. Breaking cycle.
    return _process_dict_optimized(obj, config, _depth, _seen)

tests/coverage/test_exception_flows_batch2.py::TestDatetimeUtilsExceptionFlows::test_ensure_dates_conversion_failure
  /Users/danielmeierendler/git/datason/datason/datetime_utils.py:190: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.
    df["date"] = pd.to_datetime(df["date"])

tests/coverage/test_focused_coverage_boost.py::TestSimpleErrorPaths::test_scipy_sparse_error_handling
  /Users/danielmeierendler/git/datason/tests/coverage/test_focused_coverage_boost.py:197: UserWarning: Could not serialize scipy sparse matrix: Cannot convert
    result = serialize_scipy_sparse(mock_matrix)

tests/coverage/test_focused_coverage_boost.py::TestSimpleErrorPaths::test_sklearn_model_error_handling
  /Users/danielmeierendler/git/datason/tests/coverage/test_focused_coverage_boost.py:182: UserWarning: Could not serialize sklearn model: Mock error
    result = serialize_sklearn_model(mock_model)

tests/coverage/test_ml_with_real_libraries.py::TestScikitLearnSerializationWithRealLibrary::test_serialize_model_exception_handling
  /Users/danielmeierendler/git/datason/tests/coverage/test_ml_with_real_libraries.py:225: UserWarning: Could not serialize sklearn model: Cannot get parameters
    result = serialize_sklearn_model(model)

tests/coverage/test_targeted_coverage_boost.py::TestSpecificUncoveredLines::test_core_lines_106_108_vars_exception
  /Users/danielmeierendler/git/datason/datason/core.py:308: UserWarning: Error serializing ProblematicObject: No __dict__. Using string representation.
    return _serialize_core(obj, config, _depth, _seen, _type_handler)

tests/test_new_ml_frameworks.py::TestKerasSerialization::test_serialize_keras_sequential
tests/test_new_ml_frameworks.py::TestKerasSerialization::test_detect_keras_model
tests/test_new_ml_frameworks.py::TestKerasSerialization::test_keras_end_to_end_serialization
  /Users/danielmeierendler/.pyenv/versions/3.12.0/lib/python3.12/site-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
    super().__init__(activity_regularizer=activity_regularizer, **kwargs)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform darwin, python 3.12.0-final-0 ----------
Name                          Stmts   Miss Branch BrPart  Cover   Missing
-------------------------------------------------------------------------
datason/__init__.py             109     35     30      8    68%   17, 23, 106-114, 125-126, 135-136, 158-177, 240->286, 286->312, 312->332, 384->388, 397-398, 418-419, 422->433, 433->452, 454, 459
datason/api.py                   88     17     30      4    77%   112-126, 130, 210->220, 250-251, 294, 409->411, 470-478, 487-495
datason/cache_manager.py        226    138     88      6    31%   24-27, 30, 33, 36, 39, 43-44, 47-50, 53, 88, 94-111, 114-121, 127-142, 146-170, 196-208, 211-216, 225, 231-243, 273-308, 313-315, 320-324, 343-353
datason/config.py               110     19      6      0    78%   268-269, 274, 292-315
datason/converters.py            27      0     10      0   100%
datason/core.py                1042    229    670    109    75%   17-18, 22-23, 37-46, 146, 148, 150, 152, 154, 156, 158, 165, 172, 188, 197, 226, 229, 233, 290->295, 292->295, 296-298, 302-305, 418->423, 461->466, 512, 576, 583->601, 604-618, 623-635, 641, 645->658, 654->658, 659, 740-744, 756, 781->790, 783, 797-799, 810, 821, 833, 844-851, 869, 886, 891-892, 901-902, 937-941, 955-966, 988-992, 1009-1014, 1016-1018, 1074, 1118, 1166-1173, 1234, 1319->exit, 1348, 1428->1426, 1442, 1484-1485, 1498, 1517, 1523-1525, 1532->1535, 1557->1560, 1573-1586, 1648, 1651->1655, 1658, 1679, 1688->1706, 1767, 1780-1781, 1784->1788, 1790-1801, 1814, 1819-1825, 1849, 1860->1865, 1867-1878, 1891, 1896-1902, 1915-1917, 1923->exit, 1931-1933, 1939->exit, 1964, 1971, 1981, 1987, 1991, 1998, 2003-2004, 2010, 2014, 2019-2020, 2025-2036, 2055, 2059, 2061-2068, 2082, 2085-2088, 2105, 2111, 2127-2143, 2156->2160, 2164-2172, 2178, 2181->2193, 2202-2208, 2216, 2225, 2227-2228, 2241->2238, 2254, 2297, 2305-2315, 2346-2357
datason/data_utils.py            24      2     18      2    90%   32->52, 39-41, 59->56
datason/datetime_utils.py        97     10     56      4    90%   13-14, 155-157, 162-164, 179->194, 186, 194->200, 197-199
datason/deserializers.py       1254    387    656     89    70%   20-26, 49-50, 98-99, 103-104, 160-162, 179, 223-224, 234-235, 241-242, 247, 336, 339->642, 393->404, 413->642, 438-439, 446->642, 499-502, 524-527, 532-536, 539-545, 550->642, 564-565, 569-589, 593-610, 614-622, 627->642, 635-639, 659-660, 668-669, 681-682, 721, 733-737, 747, 774, 786->788, 836, 841, 914-916, 925, 986->1002, 1015-1024, 1078, 1105, 1113, 1122, 1136-1138, 1142->1141, 1146-1148, 1158, 1163-1165, 1169, 1173, 1178-1179, 1182->1185, 1191-1200, 1209, 1216->1224, 1219-1221, 1224->1231, 1227-1229, 1232-1234, 1239, 1248-1257, 1264-1266, 1274-1275, 1277, 1281-1285, 1290-1358, 1365-1368, 1372-1416, 1422-1424, 1430-1434, 1442-1445, 1460-1465, 1468-1470, 1545, 1564->1563, 1583-1586, 1658-1659, 1739, 1744, 1756-1757, 1778, 1783, 1810-1811, 1819-1820, 1829-1833, 1837-1841, 1844->1850, 1847, 1851, 1853, 1885-1887, 1894-1903, 1907-1918, 1922-1933, 1955, 2026, 2071, 2075, 2079, 2113-2120, 2132-2134, 2142-2149, 2161-2163, 2175-2188, 2209-2211, 2217-2219, 2235-2236, 2239-2242, 2248-2250, 2262, 2279->2276, 2282-2284, 2288-2301, 2315-2317, 2336, 2349-2350, 2353, 2359->2392, 2362-2363, 2376-2390, 2403-2404, 2415, 2424-2444
datason/ml_serializers.py       420     77    166     13    83%   51-52, 103-105, 137-139, 164-165, 187-188, 210-211, 221-225, 232-233, 243-247, 254-255, 265-269, 276-277, 287-291, 298-299, 309-313, 320-321, 424, 427-428, 534-536, 563-568, 648-650, 664-666, 695-697, 732-734, 768, 863, 865, 867, 869, 871
datason/ml_type_handlers.py     294    294     36      0     0%   17-573
datason/pickle_bridge.py        102      9     18      0    92%   226-227, 267-270, 332-334
datason/redaction.py            150      9     48      3    94%   121-123, 182-184, 194-196, 345, 360
datason/serializers.py           51     10     34      6    81%   13-14, 18-19, 40, 54->64, 61, 64->76, 68, 72-74
datason/type_handlers.py        150     28     78     12    82%   16-17, 21-22, 48-49, 89, 116, 127-131, 143-147, 158, 207, 213, 244, 279, 301->308, 303, 305, 312-314, 329, 343, 369->376, 372-373, 378->384
datason/type_registry.py         56     56     16      0     0%   14-228
datason/utils.py                440     71    276     50    82%   19-23, 129, 161-162, 196-197, 221, 224-225, 250-251, 312-319, 322->333, 325-328, 354-357, 372, 381-388, 464->472, 490, 510-511, 515-517, 608, 615, 618->624, 630, 641, 646, 650, 653->656, 662, 666, 672, 676, 711, 725, 731, 753, 763-771, 814, 820, 828, 833-834, 839, 850, 896-897, 910, 920->929, 939->947, 952-953, 984-985, 1004->1012, 1015->1028, 1018->1028, 1024-1025, 1031-1032, 1038-1039, 1043-1046
datason/validation.py            50      1     16      1    97%   50
-------------------------------------------------------------------------
TOTAL                          4690   1392   2252    307    70%
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

Required test coverage of 70% reached. Total coverage: 70.37%
================ 1237 passed, 10 skipped, 31 warnings in 24.43s ================
