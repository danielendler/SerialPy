name: 🚀 Bump Major Version & Release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes (required for major releases)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  bump-and-release:
    runs-on: ubuntu-latest
    environment: pypi

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests toml

    - name: 🔍 Get Current Version
      id: current_version
      run: |
        # Try to get version from PyPI first
        PYPI_VERSION=$(python -c "
        import requests
        try:
            response = requests.get('https://pypi.org/pypi/datason/json', timeout=10)
            if response.status_code == 200:
                data = response.json()
                print(data['info']['version'])
            else:
                print('NOT_FOUND')
        except:
            print('NOT_FOUND')
        " 2>/dev/null)

        if [ "$PYPI_VERSION" = "NOT_FOUND" ]; then
          # Fallback to latest git tag
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.3.0")
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.3.0")
        else
          CURRENT_VERSION="$PYPI_VERSION"
          LATEST_TAG="v$PYPI_VERSION"
        fi

        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "📋 Current version: $CURRENT_VERSION"
        echo "📋 Latest tag: $LATEST_TAG"

    - name: 🔎 Check for Code Changes
      id: changes_check
      run: |
        LATEST_TAG="${{ steps.current_version.outputs.latest_tag }}"

        # Get the commit hash that the latest tag points to
        if git rev-parse --verify "$LATEST_TAG" >/dev/null 2>&1; then
          TAG_COMMIT=$(git rev-parse "$LATEST_TAG")
          CURRENT_COMMIT=$(git rev-parse HEAD)

          echo "🏷️ Tag $LATEST_TAG points to: $TAG_COMMIT"
          echo "📍 Current HEAD commit: $CURRENT_COMMIT"

          if [ "$TAG_COMMIT" = "$CURRENT_COMMIT" ]; then
            echo "⚠️ No code changes since last release ($LATEST_TAG)"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "skip_reason=No code changes since $LATEST_TAG" >> $GITHUB_OUTPUT
          else
            # Check how many commits ahead we are
            COMMITS_AHEAD=$(git rev-list --count "$TAG_COMMIT..HEAD" 2>/dev/null || echo "unknown")
            echo "✅ Found $COMMITS_AHEAD commits since $LATEST_TAG"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ No previous tag found, proceeding with release"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "commits_ahead=unknown" >> $GITHUB_OUTPUT
        fi

    - name: ⏭️ Skip Release (No Changes)
      if: steps.changes_check.outputs.has_changes == 'false'
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## ⏭️ Major Release Skipped

        **Reason**: ${{ steps.changes_check.outputs.skip_reason }}

        **Current version**: `${{ steps.current_version.outputs.current }}`
        **Latest tag**: `${{ steps.current_version.outputs.latest_tag }}`

        ### 💡 Why was this skipped?
        The current code is identical to what was already released.
        Make some code changes first, then run the bump workflow again.

        ### 🔗 Quick Links
        - Current release: https://github.com/danielendler/datason/releases/tag/${{ steps.current_version.outputs.latest_tag }}
        - PyPI: https://pypi.org/project/datason/
        EOF

        echo "⏭️ Skipping release - no code changes detected"
        exit 0

    - name: ⬆️ Calculate Next Version
      if: steps.changes_check.outputs.has_changes == 'true'
      id: next_version
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"

        # Parse version (e.g., "0.3.1" -> major=0, minor=3, patch=1)
        IFS='.' read -r major minor patch <<< "$CURRENT"

        # Bump major version, reset minor and patch to 0
        next_major=$((major + 1))
        NEXT_VERSION="${next_major}.0.0"

        echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "🎯 Next version: $NEXT_VERSION"
        echo "📈 Changes: ${{ steps.changes_check.outputs.commits_ahead }} commits since last release"

    - name: ✏️ Update pyproject.toml
      if: steps.changes_check.outputs.has_changes == 'true'
      run: |
        python -c "
        import toml

        # Read current pyproject.toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)

        # Update version
        data['project']['version'] = '${{ steps.next_version.outputs.next }}'

        # Write back
        with open('pyproject.toml', 'w') as f:
            toml.dump(data, f)

        print('✅ Updated pyproject.toml version to ${{ steps.next_version.outputs.next }}')
        "

    - name: 📝 Commit Version Bump
      if: steps.changes_check.outputs.has_changes == 'true'
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add pyproject.toml
        git commit -m "🚀 Bump major version to ${{ steps.next_version.outputs.next }} [skip ci]"

        # Check if tag already exists before creating it
        if git rev-parse --verify "${{ steps.next_version.outputs.tag }}" >/dev/null 2>&1; then
          echo "⚠️ Tag ${{ steps.next_version.outputs.tag }} already exists, skipping tag creation"
        else
          echo "✅ Creating new tag ${{ steps.next_version.outputs.tag }}"
          git tag ${{ steps.next_version.outputs.tag }}
        fi

        # Use the GITHUB_TOKEN for pushing
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git push origin main

        # Only push tag if it was newly created locally
        if git show-ref --tags "${{ steps.next_version.outputs.tag }}" >/dev/null 2>&1; then
          echo "✅ Pushing new tag ${{ steps.next_version.outputs.tag }}"
          git push origin ${{ steps.next_version.outputs.tag }}
        else
          echo "ℹ️ Tag ${{ steps.next_version.outputs.tag }} was not created locally, skipping tag push"
        fi

    - name: 🏗️ Build Package
      if: steps.changes_check.outputs.has_changes == 'true'
      run: |
        python -m pip install build
        python -m build
        ls -la dist/

    - name: 🚀 Trigger Release Workflow
      if: steps.changes_check.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          // Trigger the existing release workflow that's already configured for PyPI
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'release.yml',
            ref: 'main',
            inputs: {
              version: '${{ steps.next_version.outputs.tag }}',
              prerelease: 'false'
            }
          });

          console.log('✅ Triggered release workflow for ${{ steps.next_version.outputs.tag }}');

    - name: ✅ Release Summary
      if: steps.changes_check.outputs.has_changes == 'true'
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## 🚀 Major Release Initiated!

        **Previous version**: `${{ steps.current_version.outputs.current }}`
        **New version**: `${{ steps.next_version.outputs.next }}`
        **Tag created**: `${{ steps.next_version.outputs.tag }}`
        **Commits included**: ${{ steps.changes_check.outputs.commits_ahead }}

        ### 🔄 Next Steps
        The release workflow has been triggered and will handle:
        - Building and publishing to PyPI
        - Creating the GitHub release

        **Monitor**: Check the Actions tab for the release workflow progress

        ### ⚠️ Breaking Changes Notice
        This major release may contain breaking changes. Users should review the changelog before upgrading.

        ### 🔗 Quick Links
        - PyPI: https://pypi.org/project/datason/ (will update shortly)
        - Documentation: https://datason.readthedocs.io
        EOF
