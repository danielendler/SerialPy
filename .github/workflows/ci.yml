name: CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore: 
      - 'docs/**'
      - '*.md'
      - 'mkdocs.yml'
      - '.readthedocs.yaml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md' 
      - 'mkdocs.yml'
      - '.readthedocs.yaml'
  release:
    types: [ published ]

jobs:
  # Core functionality testing - minimal dependencies
  test-core:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run core tests
      run: |
        pytest tests/test_core.py tests/test_converters.py tests/test_deserializers.py -v --cov=serialpy --cov-report=xml --cov-report=term-missing

    - name: Upload core coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: core
        name: core-${{ matrix.os }}-py${{ matrix.python-version }}

  # Data science dependencies testing
  test-data-science:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Skip Windows for faster testing
        python-version: ["3.9", "3.10", "3.11", "3.12"]  # Skip 3.8 for newer deps

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install data science dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Run data science tests
      run: |
        pytest tests/test_optional_dependencies.py tests/test_edge_cases.py tests/test_performance.py -v --cov=serialpy --cov-report=xml --cov-report=term-missing

    - name: Upload data science coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: data-science
        name: data-science-${{ matrix.os }}-py${{ matrix.python-version }}

  # ML/AI dependencies testing - most resource intensive
  test-ml:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]  # Skip Windows for ML deps
        python-version: ["3.10", "3.11", "3.12"]  # Only newer Python for ML

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all,ml]"
        # Install PyTorch CPU version for testing
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Run ML tests
      run: |
        pytest tests/test_ml_serializers.py -v --cov=serialpy --cov-report=xml --cov-report=term-missing

    - name: Upload ML coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ml
        name: ml-${{ matrix.os }}-py${{ matrix.python-version }}

  # Comprehensive testing - all dependencies
  test-comprehensive:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all,ml]"
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Run all tests
      run: |
        pytest -v --cov=serialpy --cov-report=xml --cov-report=term-missing --cov-report=html

    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: comprehensive-coverage

    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: htmlcov/

  # Performance regression testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [test-core, test-data-science]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"

    - name: Run performance benchmarks
      run: |
        pytest tests/test_performance.py -v --tb=short

    - name: Check performance regression
      run: |
        echo "Performance tests completed successfully"

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        bandit -r serialpy/ -f json -o bandit-report.json || true

    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Code quality checks
  quality-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run black formatter check
      run: |
        black --check --diff serialpy/ tests/

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff serialpy/ tests/

    - name: Run flake8 linting
      run: |
        flake8 serialpy/ tests/

    - name: Run mypy type checking
      run: |
        mypy serialpy/ --ignore-missing-imports

  build:
    needs: [test-core, test-data-science, test-ml, test-comprehensive, performance-test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        # Create basic sphinx docs if docs directory exists
        if [ -d "docs" ]; then
          cd docs
          make html
        else
          echo "No docs directory found, skipping documentation build"
        fi
